1. What is the diference synchronous and asynchronous programming?



				1. synchronous is code is excuted in sequence manner it's is called synchronous programming.

				publc static int Method1() {
					Thread.Sleep(500);
					return 10;
				}

				publc static int Method2(){
					return 20;
				}

				public static int method3(){
					return 30;
				}


				Console.WriteLine(method1());
				Console.WriteLine(method2());
				Console.WriteLine(method3());


				2. when a see task then code is excuted parallelly it's is called asynchronous programming.

				public static void Main(string[] args){
					Task task1 = Task.Run(() => {Console.WriteLine(Method1)});
				    
				    Task task2 = Task.Run(() => {Console.WriteLine(Method2)}); 

				    Task task3 = Task.Run(() => {Console.WriteLine(Method3)});

				    Console.Read();
				}

2. what is the difference between an abstract class and an Interface

			     //ABSTRACT

			    1.Abstract class contains both DECLARATION & DEFINITION of methods.

			    public abstract class Employee
			    {
			      public abstract void Project();   //Method Declared

			      public void Role() {
			         Console.WriteLine("Engineer"); //Method Defined
			      }
			    }

			    2.Abstract class keyword : ABSTRACT

			    3.Abstract class does not support multiple Inheritance

			    public abstract class Employee{
			      public abstract void Project();

			      public void Role() {
			        Console.WriteLine("Engineer");
			      }
			    }

			    public abstract class Employee1 {
			       public abstract void Project1();

			       public void Role1() {
			         Console.WriteLine("Emgineer1");
			       }
			    }
			    
			     public class ParamnentEmployee: Employee,Employee1{//Getting error abstract class not allow multiple Inheritance


			     }


			     4.Abstract class can have Constructors.

			     public abstract class Employee1{

			       pulic Employee1(){

			       }
			       public abstract void Project1();

			       public void Role1(){
			          Console.WriteLine("Engineer1");
			       }
			     }


			    //INTERFACE

			    1.Interface should contain Declaration of methods.

			    interface IEmployee{ 

			       public void Project1(); //Only method Declaration is allowed

			       public voide Manager1(); //Only method Declaration is allowed
			    }

			    2. Interface keyword : INTERFACE

			    3.Interface supports multiple inheritance.

			    Interface IEmployee1{
			      public void Project1();
			    }

			    Interface IEmployee2{
			      public void Project2();
			    }
			    

			     public class NewEmployee : IEmployee1,IEmployee2
			     {

			        public void Project1()
			        {
			           Console.WriteLine("Print 1");
			        }

			        public void Project2() {
			           Console.WriteLine("Print 2");
			        }

			     }

			    4.Interface do not have constructors.

			    interface IEmployee1(){

			       public IEmployee1(){ //here getting compile error because Interface can't contain constructors.

			       }

			       public void Project1();
			    }
3. When to use Interface?

				An Interface is a good choice when you know a method has to be there,but it can be implemented Differently by indepedent derived classes.

				public class PermanentEmployee{
					
				}

				public class ContractualEmployee{
					
				}

				interface IEmployee{
					public void AssignEmail();

					public void AssignManager();
				}

				Normally we prefer Interface because it gives us the flexibly to modify the behavior at later stage.



4. When to use abstract?
		   
		   Abstract class is a good choice when you are sure some methods are concrete/defined and must be implemented in the same way in all derived classes.

		public class PermanentEmployee{
			
		}

		public class ContractualEmployee{
			
		}

		public abstract class EmployeeDress{
			
			 public abstract void DressCode();

			public void DressColor() {
			   Console.WriteLine("BLUE");
			}
		}
5. what is .NET core?

		 	.NET core is completely a new framework, which is a free and open source plateform developed and maintained by Microsoft.

6.What are advanages of OOps in C# ?

    1.Reuse of code using inheritance
    2. flexibility of code using polymorphism
    3. secure application by using encapulation
    4. Easily scable from small to large application.

7.what are the type of classes in C#?

   public abstract class class1 {

   }

   public static class class2 {

   }

   public partial class class3 {

   }

   public sealed class class4 {

   }

8. Is it possible to prevent object creation of class in C#?

		public abstract class Maths{
			
		}
		private class science{
			
		}

		public static class Social{
			
		}

9. What is the difference between abstraction and encapsulation?

     abstraction means showing only required things and hide the background details.

     Encapsulation means wrapping of data and method into a single unit.

     Abstraction is a broader conecpt hinding.

     Whereas encapuslation is like a proper implementation where you wrap method and the data.

10. what is the difference between overloading and overriding?
   
      public class BaseClass{

         public virtual void Greeting(){
            Console.WriteLine("BaseClass Hello!");
         }
      }

      public class DerivedClass : BaseClass
      {
        public override void Greetings(){
           Console.WriteLine("DerivedClass Hello1");
        }



        static void Main(){
           DerivedClass objDerived = new DerivedClass();
           objDerived.Greetings(); //DerivedClass Hello1
           Console.ReadLine();
        }
      }

			Method Overloading

			1. Multiple methods of same name in single class
			2. No need of inheritance, as it is in single class.
			3. All methods have difference signature.
			4. it's a compile time polymorphism.
			5. No special keyword used.


			Method Overriding 
			1. multiple methods of same name in different class.
			2. Inheritance is used as it is in different classs.
			3. All methods hae same signature
			4. it's run time polymorphism.
			5. Virtual & Override keywords.


Overriding is used to modify and provide a new implementation of the method Inherited from a base class


if a method is marked as virtual, do we must have to "override" it from the child class?


11. What are difference between IEnumerable and IQueryable 
--> IEnumerable : - 1.IEnumrable exits in the system.Collections namespace.

                    2. IEnumrable is suitable for querying data from in momory collections like list, array, and so on.

                    3.while querying data from the database , IEnumrable excutes "Select Query" on the server-side.load data in - memory on the client and then filter the data.

                    4.IEnumerable is beneficial for LINQ to object and 	Linq to XML queries.

    Iqueryable : - 1. Iqueryable exits in the System.Linq namespace
                   
                   2. IQueryable is suitable for querying data out-momery like (like remote database, service) collections.
                   
                   3. while queryindg data from a database.Iqueryable excutes "Select query" on server side with all filters.
                   
                   4. IQueryable is beneficial for Linq to sql queies.




12. what is difference between IEnumerable VS IEnumerator C#?
--> Similarities
    
    Both of these interfaces help to loop through the collection.

    so, now the next question, what should I use ?

    As we know,both of these interfaces give the same result. but if you watch the syntax for IEnumerable it is very simple.

    foreach(string AllMonths in IEnumerableOfString){
             Console.WriteLine(AlMonth);
    }

   But in the case of IEnumerator, we need to invoke the MoveNext method and to retrieve the current item we need to invoke the current property.


   Relation

   the IEmunerable Interface actually uses IEnumerator.the main reason to create a IEnumerable is to make the syntax shorter and simpler.

   if you go to the definition of the IEnumerable<T> interface.
   you will see this interface has a method GetEnumerator() that return an IEnumerator object back.

   In short, this IEnumerable uses IEnumerator internally.

   

13. What is the difference between IEnumerator and IEnumerable? [duplicate]


         


				An Enumerator shows you the items in a list or collection. Each instance of an Enumerator is at a certain position (the 1st element, the 7th element, etc) and can give you that element (IEnumerator.Current) or move to the next one (IEnumerator.MoveNext). 

				When you write a foreach loop in C#, the compiler generates code that uses an Enumerator.

				An Enumerable is a class that can give you Enumerators. 
				It has a method called GetEnumerator which gives you an Enumerator that looks at its items. 
				When you write a foreach loop in C#, the code that it generates calls GetEnumerator to create the Enumerator used by the loop.


				IEnumerable and IEnumerator are both interfaces. IEnumerable has just one method called GetEnumerator. 

				This method returns (as all methods return something including void) another type which is an interface and that interface is IEnumerator. 

				When you implement enumerator logic in any of your collection class, you implement IEnumerable (either generic or non generic). 

				IEnumerable has just one method whereas IEnumerator has 2 methods (MoveNext and Reset) and a property Current. 

				For easy understanding consider IEnumerable as a box that contains IEnumerator inside it (though not through inheritance or containment). 

				See the code for better understanding:


				class Test : IEnumerable, IEnumerator
				{
				    IEnumerator IEnumerable.GetEnumerator()
				    {
				        throw new NotImplementedException();
				    }

				    public object Current
				    {
				        get { throw new NotImplementedException(); }
				    }

				    public bool MoveNext()
				    {
				        throw new NotImplementedException();
				    }

				    public void Reset()
				    {
				        throw new NotImplementedException();
				    }
				}

14. what is ASP.NET State Management ?
--> 

     State management maintains and stores the information of any user till the end of the user session.


     https://www.c-sharpcorner.com/UploadFile/b926a6/state-management-concept-in-Asp-Net/Images/State%20management.jpg


   1.Server-side
         
         1.Session 

         The session is a very important technique to maintain state. Normally session is used to store information and identity. The server stores information using Sessionid.

         Set User Session

			protected void btnSubmit_Click(object sender, EventArgs e)
			{
				Session["UserName"] = txtName.Text;

				Response.Redirect("Home.aspx");
			}

					2.Session Event

		             The session event can be seen in the project Global.asax file.

						 Two types of Session Events

					    1.Session_Start

							The Session_start event is raised every time a new user requests without a session ID.

							void Session_Start(object sender, EventArgs e)
							{
							    Session["master"] = "~/Master.master";
							}

						2.Session_End

						   The Session_End event is raised when the session is ended by a user or a time out using the Session end method.

							void Session_End(object sender, EventArgs e)
							{
									Response.Write("Session_End");
							}

               
		     2.Application

		            The application State is a server-side management state. It is also called application-level state management. This mainly stores user activity in server memory and application events shown in Global.asax file.

		            There are three types of applications in ASP.NET.

		            1.Application_Start

						This event begins with domain start.

						   void Application_Start(object sender, EventArgs e)
							{
							    Application["AppstartMessage"] = "Welcome to CSharp Corner Developer Community";
							}

						2.Application_Error

						In this section manage unhandled exception errors.

							void Application_Error(object sender, EventArgs e)
							{
									// Write an unhandled error code exception
							}

						3.Application_ End
							This ends with domain or restarts IIS.

							void Application_End(object sender, EventArgs e)
							{
							    Application["AppEndMessage"] = "Application Closed";
							}

			3.Cache
		       
		        The cache is stored on the server side. It implements Page Caching and data caching. The cache is used to set expiration policies.

		        Response.Cache.SetExpiresTime(DateTime.Now.AddDays(1));

   2.Client Side

       Now here I am explaining client-side state management one by one:

      Also, state management has the following four important parts available on the client side.

      1.Cookie
              Cookie is a small and an important part of ASP.NET. In this store user information, sessions, and applications. It can be created constantly and temporarily and they work with browser requests. Cookies are stored on the client side. The server can read cookies and abstract data.

					Two types of cookies are available.

					Persistence

					This type of cookie works with Date and time.

					Response.Cookies["CookieName"].Value = "Test Cookies";
					// Set expire time
					Response.Cookies["CookieName"].Expires = DateTime.Today.AddHours(1);

					Non-Persistence

					This is a temporary cookie. It is created with an access application and discards the closed application.

					Response.Cookies["CookieName"].Value = "TestCookies";
		
		2.Control state

			      The control state technique is developed to maintain data work properly in order. We can use view state but suppose view state is disabled by the user, the control will not work as expected. For the expected results of the control, we have to use the Control State. In the application, the Viewstate is by default true. Sometimes we need to use custom control to manage applications properly.
                
                if (!IsPostBack)
						{
						    lblmsg1.Text = "Welcome to C# corner";
						    lblmsg2.Text = "Welcome to C# corner community";
						}

						When two messages are displayed on a Postback event, then control which one is displayed by using a customized control state.


		3.Hidden Field

		           Hidden fields are used to store value on the client side. The hidden field is not displayed on the browser, but it works on a request.

		           if (HiddenField1.Value != null)
						{
						    int val = Convert.ToInt32(HiddenField1.Value) + 1;
						    HiddenField1.Value = val.ToString();
						    Label1.Text = val.ToString();
						}

		4.ViewState

		          ViewState is a very useful client-side property. It is used for page-level state management. Viewstate stores any type of data and is used for sending and receiving information.

						ViewState Demo Count: <asp:Label runat="server" id="lblcount" />
						<asp:Button runat="server" id="Submit" onclick="Submit_Click" text="show" />

						protected void Page_Load(object sender, EventArgs e)
						{
						 if (IsPostBack)
						 {
						     if (ViewState["count"] != null)
						     {
						         int ViewstateVal = Convert.ToInt32(ViewState["count"]) + 1;
						         lblcount.Text = ViewstateVal.ToString();
						         ViewState["count"] = ViewstateVal.ToString();
						     }
						     else
						     {
						         ViewState["count"] = "1";
						     }
						 }
						}

						protected void Submit_Click(object sender, EventArgs e)
						{
						 lblcount.Text = ViewState["count"].ToString();
						}

						OR,

						ViewState["UserName"] = txtUserName.Text;

						Viewstate is easy to apply and does not need access to any server resources. In a Viewstate, do not store big data, only store small values. Viewstate enables and disables page-level control. It also supports Encryption and Decryption and data/value is stored in hashed format. So we are not storing important data such as passwords, account information, etc. When more data is stored in this, then the page becomes heavy.

       5.Query String
             The query string stores the value in the URL.
              
              Response.Redirect("ShowStringValue.aspx?Username=" + txtUsername.Text);

              It is visible to all the users in the URL as in the following link.


15. what is the use of Yeild keyword in C#?
--> The Yeild keyword will act as an irerator blocker and generate or return values.

16. what is SOLId PRINCIPLES ?
--> Single Response Principle : - a class should have only one reason to change
    open/Closed Principle :-- Open for extension close for modification.
	Liskov substitution principle : - subtypes must be substitutable for their base types.
	Interface segregation principle : -client should not be forced to depend on interfaces they do not use.
	Dependency inversion principle :- depend on abstrations, not concretions.

17. what are Serialization and Deserialization? what are the types of serialization?
--> Serialization is the process of converting an object into a format that can be stored, transmitted, or reconstructed later. 

		types of Serialization : - Binary Serialization
		                           XML Serialization
								   Json Serialization

	Deserialization is the process of converting serialization data , such as binary,xml,json data, back to into object.

18. What is a method/function in C#?
--> A method is a code block that contains a series of statement.

19. what is Property?
-->    
   public class MyClass
   {
	 private int myProperty; // private property directly access not allow to Property this is violation of the Property.

	 public int MyProperty{ // first of all you set pubic and then read and write a method.
		get { return myProperty }
		set { myProperty = value; }
	 }
   }

   a property is a class member that provides a flexible mechanism to read and write Private field.


20. what is the difference between Property and Function?
--> 

    Property is a specialized function only

	public class Property_function
	{
		public int MyProperty {get;set;} // this a specialized function get is read and set is write 

		public int MyProperty() {//getting error dublicate function is not allow 

		}
	}

21. what are NameSpaces?

 namespace MyNameSpaces{

	public class MyClass{
		//class implement
	}
 }


 using MyNameSpaces;
 MyClass MyInstance = new MyClass();

 A namespace is a container for a set of related classes and other types.
 
 21. Does C# support multiple Inheritance? how can you implement multiple inheritance in C#?
 
 --> No (C# does not support Multiple Inheritance)

 Alternative way to do multiple inheritance is via multiple interfaces.




22. how to prevent a class from being inerited?
--> Sealed and static class we can't be inerited a class.

Defference between sealed & static class, but you cannot create the object of static class

23. Are private class members inherited to the derived class?

--> no the private members cannots be inherited to derived class.

   Only public and protected class members can be inherited to DerivedClass

24.what is Encapulation?

--> Encapsulation means wrapping of data and method into a single unit.

public class Employee{

	private int empExperience;

	public int Empexperience{
		get { return empExperience; }
		set { empExperience = value; }

	}
}

25. what is the difference between abstraction and Encapsulation?
--> 
Abstraction means showing only required things and hide the background details.

Encapsulation means wrapping of data and method into a single unit.

Abstractionis is a broader concept of hiding.

Whereas encapulation is like a proper implementation where you wrap implementation where you wrap method and the data.

26. what is polymorphism and what are its types?

--> polymorphism is the ability of a variable,object, or function to take on multiple form.

overloading

public class polymorphism{
	public int add(int a , int b){
           return a * b;
	}

	public string Add(string Str1,string Str2) {
		return Str1 = Str2;
	}
}

  two type of polymorphism?

  Overloading :- complie time
  Overriding : - run time

27. what is Method Overloading ? in how  many ways a method can be Overloading?

--> public class MethodOverloading
{
	public int Add(int a, int b){
		return a * b;
	}

	public int Add(int a, int b, int c){

		return a * b * c;
    }
}

Method overloading is a type of polymorphism in which we can create multiple methods of the same name in the same class, and all methods work in different way.

    Three way of method Overloading

	1. Number of parameter are different
	2. type of parameter are different
	3. Order of parameter are different

28. what is the use of Overriding? when should I override the methods?
--> 

  public class technology{

	  public virtual void TechnicalSkill() {
		Console.WriteLine("Coding");
	  }

	  public virtual void CommunicationSkill(){
		Console.WriteLine("English");
	  }
  }

  public class java : technology{

  }

  public class Dotnet : technique{


  }
  public class Testing : technology{
	public override void TechnicalSkill() {//why create this method because we don't create method inside statement so we derived from base class
		Console.WriteLine("Testing");
	}
  }

  Overriding is used to modify and provide a new implementation of the method inherited from a base class.

  29. Can you create an instance of an abstract class or an Interface?

  --> No. Abstract class and Interface purpose is to act as base class  via inhritance. there object creation is not possible.

  30. Do Interface can have a constructor?

    interface IEmployee1{
		public IEmployee1() {

		}

		public void Project1();
	}

	No, Interface can only be used for Inheritance, so constructor is not required.

31.what is the difference between abstraction and abstract class?
--> 

   Abstraction means showing only required things and hide the background details.

   Abstract class is one of the way to implement abstraction.

32. can Abstract class be sealed or static in C#?

-->

    public sealed abstract class Employee{
       public abstract int salary();

	   public string Role(){
		return "Developer";
	   }

	}

	No, Abstract class are used for Inheritance,but sealed and static both will not allow the class to be inherited.

33. Do abstract class have constructor in C#?
--> yes,it is possible

 public abstract class Employee{
	public Employee(){
		console.writeLine("Employee Code");
	}
 }

 public class PermanentEmployee : Employee{

 }

 static void Main(string[] args){

    ParamnentEmployee employee = new ParamnentEmployee()

	//Output Employee Code
 }

34. Can you declare abstract methods as Private in C#?

pubic abstract class Employee{

	private abstract int salary();

	public string Role(){
		return "Developer";
	}
}

No abstract methods are only declared, and they must be implemented in the derived class,
therefore they can not be private.

35. Does abstract class multiple inheritance?

--> 
   public abstract class technology{
	 public abstract void Dotnet();
   }

   public abstract class Role{
	public abstract void Lead();
   }

   public class Employee : technology,Role // here getting error abract class not allow multiple inheritance

{

}

  No, only at maximum one abstract class can be used for inheritance.
  but multiple interface can be used.

36. what is Boxing and Unboxing?
--> 

    static void Main(string[] args){
         int num = 100;
		 object obj = num; //boxing
	}

	Boxing is the process of converting from value type to reference type.

    static void Main(string[] args){
         int num = 100;
		 object obj = num; 
          
		  int i = (int)obj; //Unboxing

	}
    
	   Unboxing is the process of converting to reference type to value type.


37. which one is explicit Boxing or Unboxing
-->
    static void Main(string[] args){
         int num = 100;
		 object obj = num; 
          
		  int i = (int)obj; //Unboxing

	}

	unboxing is explicit conversion process.

38. what is Internal access modifier?

 ---> Internal Modifier is used to tell that access is limited to the current assembly (project).

39. where we use boxing and unboxing in real application?

--> ArrayList arrayList = new ArrayList();

 arrayList.Add(i); //boxing

int k = (int)arrayList[0] //unboxing

40. Is Boxing and Unboxing good for Performance?

--> No, converting from one type to another type is not good from Performance point of view.

41. what is String Interpolation in C#?
--> string Interpolation is  a techniques that enables you to insert expression values into strings.

    static void Main(string[] args){
	
	string name = "Happy";
	
	Console.write("name is {0}", name);
	Console.write("name is " + name);

	//string Interpolation
	Console.Write($"name is {name}")
	}

	// output : my name is Happy

42.how to inmplement Exception handling in C#?
--> 

   1.Execption handling in object-oriented programming is used to manage errors.
   try {} catch(Exception ex) {} finally {}

43.can we execute multiple catch blocks?
--> 

   try{}catch(Arithemeticexcetion ex){}catch(ArgumentOutOfRange ex){}

   No, we can write multiple catch blocks, but when we will run the application and if any error occur, only one out of them will execute based on the type of error.

44.when to use finally in real application?
--> finally block is mostly used to dispose the unwanted objects when they are no more required.


    try{}
    catch(){
	}finally{
	}
45.Can we have only "try" block without "catch" block?

--> yes we can have only try block without catch block, but the we must have finnaly block with try block.

46. what is the difference between finally and finalize?
--> 

    finally is used in exception handling.

	finalize is a methhod which is automatically called by the garbage collector to dispose the no longer needed objects.

47.what are the difference between Array and Arraylist?
--> 

    int[] array;
	array = new int[10]
	array[0] = 1;
	array[1] = "Happay";

	ArrayList arrayList;
	arrayList = new ArrayList();

	arrayList.Add(1);
	arrayList.Add("Happy");

1.array is strongly typed but arraylist can store any type of items.
2.array can cantain fixed number of item but arraylist can stored any number of item.


48.what is the difference between Arraylist and hasttable?
-->

 in Arraylist we can only add items/values to the list.

 but in hashtable we can add items/values with the keys.


49.what is the difference between List and Dictionary collection?

-->  
    List :- 
    List is a collection of items.
	it is the generic version of arraylist.

	Dictionary :- 
	Dictionary is a collection of key value pair.
	It is the generic version of hashtable.

50.what is the use of IEnumerable in c#?
--> IEnumerable Inteface is used when we want to iterate among our collection classes using a foreach loop.

		var employees = new List<Employee>(){
		    new employee() {Id = 1,Name = "Bill"},
		    new employee() {Id = 2,Name = "Steve"},
		}

		foreach(var employee in employees){
		
		Console.WriteLine(employee.Id + ", ");
		
		}
		
		public class List<T> : ICollection<T>, IEnumerable<T>{
		
		}

51.What is constructor ?
--> A constructor is  a speialized method in the class which gets executed when a class object is created.

 constructor name is same is the class name 

 52.what are the types of constructor?
 --> 

             1.Defualt constructor
			 2.Parameterized constructor
			 3.copy constructor
			 4.static constructor
			 5.private constructor


51.What is Default contructor?
--> a default constructor is a contructor that is automatically created by the compiler,if no other constructor are defined in the class.

public class MyClass
{
   public MyClass() {
   
   }

}

static void Main(string[] args){
  MyClass myclass = new MyClass();
}
    
52.What is Paramterized constructor?
--> a constructor with at least one parameter is a parameterized contructor.

public class MyClass{
   public MyClass(int a){
       Console.WriteLine(a);
   }
}

static void Main(string[] args){
   MyClass myclass = new MyClass(100);
}

//Output : 100

53.what is static constructor?
--> static constructor is used to be called defore any static memeber or  a class is called

public class MyClass
{
   static MyClass(){
     Console.WriteLine("constructor");
   }

   public static void Print(){
     Console.WriteLine("Method");
   }

}

static void Main(string[] arg){
   MyClass.Print();
}

//output : constructor method

54.Can we have parameters or access modifer in static constructor?

--> No, static constructor can not have parameters or acces modifier.

55.What is copy constructor?
--> the constructor which creates an object by copying variables from another object is called a copy constructor.

public class MyClass{
    public string Name;

	//Parametried constructor
	public MyClass(string Name){
	    this.Name = Name;
	}

	//Copy constructor
	public MyClass(MyClass copy){
	  name = copy.name;
	}

}

56.What is private construtor? what is the use?
--> when a constructor is created with a private specifier, it is not possible for other classes to derive from hhis class,neither is it possible to create an instance of this class.

one use is singleton design pattern.

public class MyClass{
   private MyClass(){
     Console.WriteLine("Private");
   }
}

static void Main(string[] args){
    MyClass myClass = new MyClass();
}

57.what is constructor overloading?
--> constructor overloading is a technique to define multiple constructor within a class with different set of parameters.
    public class Employee
	{
	   public Employee(){
	    Console.WriteLine("Blank");
	   }

	   public Employee(int id){
	      Console.WriteLine(id);
	   }
	
	}

	static void Main(string[] args){
	Employee emp = new Employee();
	Employee emp1 = new Employee(30);
	}

	//output blank 30

58.what is Destructor?
--> Destructor is a apposit of constructor.

Destructor in C# are methods inside the class used to destory instances/ojects of that class when they are no longer needed.

The Destructor is called implicitly by the .net framework's garbage collector. it be never define a code.it's automatically excuted.

public class Employee{

  public Employee(){
  
  }

  ~Employee() {
  
  }

59.can you create object of class with private constructor in C#?

--> No

pulic class MyClass{
      private Myclass(){
	  
	  }
     }

}

60. what is the difference between pass by value and pass by reference parameters?

--> 
  //passing by Reference

    static void Main(string[] args)
	{
	   int x  = 5;
	   int y  = 10;

	   console.WriteLine(x + " " + y);
	   PassByReference(ref x,ref y);
	   console.WriteLine(x + " " + y);
	   //output : 5 10
	   //output : 100 200
	}

	static void PassByReference(ref int x,ref int y){
	  x = 100;
	  y = 200;
	}

61.How to return more than one value from a method in C#?

--> 

  1. by using ref or out parameters.

  2. By using Tuples

  3. by using a list.ArrayList(any collection)in the return type.

62.What is difference between out and ref parameters?

-->
     static void Main(string[] args){
	    int a;  //1. No need to initialize out parameter before passing it.
		int b = 5; //2. must initialize ref paramter.

		withRefout obj = new withRefOut();

		int x = obj.Update(out a, ref b);

		Console.WriteLine(x);
		Console.ReadLine();
	 }
     
	  public class withRefOut
	  {
	     public int update(out int c,ref int d)
	      {
		    C = 100; //3.out parameter must be initialized before returning.
			return c + d;// 4. for ref parameter, initialization is not neccessary before returning.
		  }
	  }

63. what is the use of params keyword in C#?
--> params keyword is used as a parameter which can take variable number of parameters.

static void Main(string[] args){
    int sum = add(,5,10,15,20)
	Console.WriteLine(sum);
	Console.ReadLine();
}

public static int Add(params int[] numbers){

   int total = 0;
   foreach (int i in number)
   total += i;

   return total;//output 
}

64.What is the use of optional paramters in a method?
--> optional parameters allow some aruments which are not mandatory to pass, and their default value is set.

          static void Main(string[] arg){
		    AddOptional(10,20);
			AddOptional(10,20,30)
		  }

	public static void AddOptional(int i,int j,int k = 50){
	  Console.WriteLine(i + j + k);
	}

65. what is the use of named paramters?
--> named paramters are used to specify an arguments based on the name of the arguments and not the position.

  static void Main(string[] args){
  // Normal way
   add(5,10,2,3);

   //Named Parameters 
   add(a: 2.0;b: 3,x: 5,y: 10);// do not maintain sequence of parameters

  }

  static void Add(int x,float y,double a, deciaml b)
  {
  
  }

66.what is the use of Extention method in C#?
--> Extention method allows you to add new methods in the existing class without modifying the source code of the original class.

this keyword is used for binding extension method with the main original class.

string test = "Helloword";

string left = test.Substring(0,5);

Console.WriteLine(left);

string right = text.Right(5);
Console.WriteLine(right);

// output Hello
//world


static class stringExtension{

 public static string Right(this.String s,int count){
     return s.substring(s.length - count,count);
 {
 
 }     


}


67. what is use of delegates in C#?
--> A delegate is a variable that holds the referrence to a method or pointer to a method.

a delegate can refer to more than one method of same return typeand parameters.

when to use delegate?

when we need to pass a method as a parameter.

       delegate void calculator(int x, int y);

class Program{

  public static void add(int a , int b){
     Console.WriteLine(a+b);
  }

  public static void Mul(int a,int b){
    Console.WriteLine(a * b);
  }


  static void Main(strin[] args){

     //Intantiating Delegate
    Calculater calc = new Calculator(Add);

	//Calling method using delegates
	cal(20,30);


  }
}

68. what is multicast delegates?
--> a multicast delegates in C# is a delegates that holds the references of more than one function.


   class Program{

  public static void add(int a , int b){
     Console.WriteLine(a+b);
  }

  public static void Mul(int a,int b){
    Console.WriteLine(a * b);
  }


  static void Main(strin[] args){

     //Intantiating Delegate
    Calculater calc = new Calculator(Add);

	cal +- mul


	//Calling method using delegates
	cal(20,30);


	//output : 50 600


  }
}

69. when to use out and when to use ref keyword?
--> use out parameter to return a new and fresh value and use ref to modify an existing value.

70. what is the difference between Events and Delegates?

--> 

  A delegates is a variable that hold the reference to method or pointer to a method.

  the event is a notification mechanisum that depends on delegates.

   functions -> Deletgate -> Event

 
  Event is like a wrapper over the delegate to improve it's security.


71. what is the ue of this keyword in C#?

--> this keyword is used to refer to the current instance of the class.

72. can we use Using statement with other classes apart from DBConnection?

--> Yes using keyword can be used with any class which is inherited from IDisposable class.

for example with StreamReader class.

73. whatisthe difference between is and as operators?

--> is : - the is operator is used to check the type of an object.

    as : - as poerator is used to perform conversion between compatible reference type.

74. what are the difference between readonly and constant variables?

--> 

 Constant
  
  class Example{
     
	  public const int myConst = 10;

	  public constint myConst1;

	  public example(int b){
	    myConst = 20;
	  }
  
  
  }

  1. using constant we must assign value with declaration itself.
  2. Constant field value cannot be changed.
  3. Const keyword used.

  ReadOnly

  class Example{
     public readonly int myReadOnly1 = 100;

	 public readonly in myReadOnly2;

	 public Example(int b){
	    myReadOnly2 = b * 100;
	 }
  }

  1. but readonly field can be assigned in declaration as well as in the constructor part.
  2. Readonly field value can be changed.
  3. Readonly keyword used.

75. what is the difference between var and dynamic in C#?
--> 

 static void Main(string[] args){
 
 var a = 10;
 a = "Interview";

 Console.WriteLine(a);
 
 }

 VAR : - the type of the variable is decided the compiler at compile time.

  static void Main(string[] args){
 dynamic a = 10;
 a = "Interview";

 Console.WriteLine(a);
 
 }

 DYNAMIC :- The type of variable is decided at run time.

76. what is the use of enum keyword?

 --> an enum is a special class that represents a goup of constants.

77. is it possible to inherit enum in C# ?

--> enum is a sealed class type, so it cannot be inherited.

78. what is the use of yield keyword?

--> this yeid keyword will act as an iterator blocker and generate or return values continuously.

//input 10

//output : 0 2 4 6 8

static IEnumerable<int> getEven(int upto)
{

    for (int i = 0; i <= upto; i +=2){
	yield return i;

    Console.WriteLine("Print");
	}

}

79. what is the use of base keyword in C#?
--> base kayword is used to access members of a base class from a derived class.

80. what are auto mplemented properties in C#?
--> auto implemented properties in C# are a simplified way to declare a property.

81. Expain Generics in C#?
--> generics allows us to make classes and methods type indepedent or type safe.

82. what is Linq ?
when to use Linq in real applications?
--> Linq (Language integrated query) is uniform query syntax in C# to retrieve data from different sources.

using System.Linq

var filterNum  = from n in num where n > 2 select n;

83. what are the advanages & disadvantages of Linq?
--> 

    Advantages of Linq
	1. Easy and simple syntax to learn
	2. Improved code readabilty
	3. improved performance 
	4. type safety

	Disadvantages of Linq 
	1.Limited support of some data sources
	2. Difficult to maintain and debug.

84. what is Lambda Expressions?

--> a lambda expression is used to simplify the syntax of anonymous methods.

85. what is the difference between first and FirstOrDefault method in Linq?
--> first method will return the first value, but it is not able to handle null values.

     FirstOrDefault will return the first value, and it is able to handle null value also.

86.what is the use of using keyword in C#?
--> there are two purpose of using keyword in C#:

1. Using Directive

2. Using Statement:- the using statement ensures to call DISPOSE() method even if an exception occurs.

86. what is the use of static class?
--> a static class is a class which object can not be created , and which can not be inherited.

static classes are used as containers for static members like methods, static members like methods, constructor and others.

87. what are collections in C# and what are their types?

--> C# Collections are used to store, manage and manipulate data.

for example arraylist,dictionary,list,hashable etc.

88. what is the difference between string and stringbuilder?

--> string is immutable in C#.

StringBuilder is mutable in C#.

89. what are access specifiers?
--> access specifiers are keyword to specify the accessiblity of a class,method, property, field.

    pubic 
	private
	Internal
	protected
	protectedInternal

90. what are the basic string operations in C#?

-->
   Concatenate :- two strings can be concatenated either by using a system.String.Concate or by using + operator.

   string str1 = "this is one";
   string str2 = "this is two";

   string str2 = str1 + str2;

   Replace : - Replace(a,b) is used to replace a string with another string.

   Trim  : - Trim() is used to trim the white spaces in a string a the end.

   contains : - check if a string contains a pattern of substring or not

   if(str.Contains("test")){
   
   }
91. why to create interfaces in real application?

--> Benefits of interfaces:

   1.Help in defining the contract of the system.

   2. unit testing is easy  in application having interfaces.

   3. used for implementing dependacy injection.

92. can we define body of interfaces methods? when to define methods in interfaces?

public Interface IEmployee{
    
	 public void Role(){
	   Console.WriteLine("Developer");
	 }

}

Yes form C# 8.0 it is possible to put method bodies in interfaces.

